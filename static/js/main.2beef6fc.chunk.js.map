{"version":3,"sources":["components/NavBar/NavBar.module.scss","components/common/button/Button.module.scss","components/1_Profile/Profile.module.scss","App.module.css","components/common/input/Input.module.scss","components/2_Login/Login.module.scss","components/3_Registration/Registration.module.scss","components/4_Forgot/Forgot.module.scss","components/NavBar/NavBar.tsx","components/common/button/Button.tsx","components/common/input/Input.tsx","components/1_Profile/Profile.tsx","components/2_Login/Login.tsx","components/3_Registration/Registration.tsx","components/4_Forgot/Forgot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","props","className","styles","navBar","navBar__upperBlock","onClick","menuClickHandle","showNavBar","to","link","navBarExtension","navBarExtensionHide","navBarExtension__upperBlock","Button","button","color","red","blue","description","Input","type","placeholder","input","Profile","wrapper","introduction","Login","Registration","Forgot","App","state","setState","this","path","exact","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2beef6fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"NavBar_navLink__3jCbp\",\"navBar\":\"NavBar_navBar__169o_\",\"navBar__upperBlock\":\"NavBar_navBar__upperBlock__qc2oW\",\"link\":\"NavBar_link__3U1xr\",\"navBarExtension\":\"NavBar_navBarExtension__YcT2y\",\"navBarExtensionHide\":\"NavBar_navBarExtensionHide__2vlmv\",\"navBarExtension__upperBlock\":\"NavBar_navBarExtension__upperBlock__3s2dJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__aD3e1\",\"red\":\"Button_red__23PuC\",\"blue\":\"Button_blue__26HuO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__34_Q4\",\"introduction\":\"Profile_introduction__3znfv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2FfA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2teXa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Registration_wrapper__1yLqN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Forgot_wrapper__3XLEZ\"};","import React from 'react';\nimport styles from './NavBar.module.scss';\nimport {NavLink} from \"react-router-dom\";\n\nfunction NavBar(props: any) {\n    return (\n        <>\n            <div className={styles.navBar}>\n                <div className={styles.navBar__upperBlock}>\n                    <i className=\"material-icons\" onClick={() => {\n                        props.menuClickHandle()\n                    }}>{props.showNavBar ? \"keyboard_arrow_right\" : \"keyboard_arrow_left\"}</i>\n\n                    <NavLink to=\"/\" className={styles.link}>P</NavLink>\n                    <NavLink to=\"/login\" className={styles.link}>L</NavLink>\n                    <NavLink to=\"/registration\" className={styles.link}>R</NavLink>\n                    <NavLink to=\"/forgot\" className={styles.link}>F</NavLink>\n\n                </div>\n            </div>\n            <div className={`${styles.navBarExtension} ${props.showNavBar && styles.navBarExtensionHide}`}>\n                <div className={styles.navBarExtension__upperBlock}>\n                    <div>Menu</div>\n                    <div>Profile</div>\n                    <div>Login</div>\n                    <div>Registration</div>\n                    <div>Forgot password</div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport styles from './Button.module.scss'\n\n\nfunction Button(props: any) {\n\n    return (\n        <>\n            <button className={`${styles.button} ${props.color === 'red' ? styles.red : styles.blue} `} >\n                {props.description}\n            </button>\n        </>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport styles from './Input.module.scss'\n\n\nfunction Input(props: any) {\n\n    return (\n        <>\n            <input type=\"text\" placeholder='Type something' className={styles.input}/>\n        </>\n    );\n}\n\nexport default Input;","import React from 'react';\nimport styles from './Profile.module.scss';\nimport Button from \"../common/button/Button\";\nimport Input from \"../common/input/Input\";\n\n\nfunction Profile(props: any) {\n\n    return (\n        <div className={styles.wrapper}>\n            Profile\n            <div className={styles.introduction}>\n                <Input/>\n                <div>\n                    <Button description={'Blue'} color={'blue'}/>\n                    <Button description={'Red'} color={'red'}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport styles from './Login.module.scss';\n\n\nfunction Login (props: any) {\n\n    return (\n        <div className={styles.wrapper}>\n            Login\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport styles from './Registration.module.scss';\n\n\nfunction Registration (props: any) {\n\n    return (\n        <div className={styles.wrapper}>\n            Registration\n        </div>\n    );\n}\n\nexport default Registration;","import React from 'react';\nimport styles from './Forgot.module.scss';\n\n\nfunction Forgot (props: any) {\n\n    return (\n        <div className={styles.wrapper}>\n            Forgot\n        </div>\n    );\n}\n\nexport default Forgot;","import React from 'react';\nimport styles from './App.module.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Profile from \"./components/1_Profile/Profile\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Login from \"./components/2_Login/Login\";\nimport Registration from \"./components/3_Registration/Registration\";\nimport Forgot from \"./components/4_Forgot/Forgot\";\n\nclass App extends React.Component {\n\n    state = {\n        showNavBar: true\n    }\n    menuClickHandle = () => {\n        this.setState({showNavBar: !this.state.showNavBar})\n    }\n\n    render() {\n        return (\n            <HashRouter>\n                <div className={styles.App}>\n                    <NavBar\n                        menuClickHandle={this.menuClickHandle}\n                        showNavBar={this.state.showNavBar}\n                    />\n                    <Route path='/' exact render={() => <Profile/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/registration' render={() => <Registration/>}/>\n                    <Route path='/forgot' render={() => <Forgot/>}/>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}